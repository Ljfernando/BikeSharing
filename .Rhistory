type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
print(vars)
print(type)
print(perc)
naData <- data.frame(variables = vars, type = type, percentage = perc)
ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") +  coord_flip()
}
print("Checking NA process completed.")
return(naData)
}
dev.off()
naData <- checkNAplot(train,test)
ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") +  coord_flip()
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
print(vars)
print(type)
print(perc)
naData <- data.frame(variables = vars, type = type, percentage = perc)
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") +  coord_flip()
print("Checking NA process completed.")
return(plot)
else
print("Checking NA process completed.")
}
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
print(vars)
print(type)
print(perc)
naData <- data.frame(variables = vars, type = type, percentage = perc)
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") +  coord_flip()
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
checkNAplot(train,test)
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
print(vars)
print(type)
print(perc)
naData <- data.frame(variables = vars, type = type, percentage = perc)
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity")
+ xlab("Variable") + ylab("Percent missing")
+ ggtitle("NA Values Missing in Training/Test Sets")
+ coord_flip()
+ geom_hline(yintercept = 0.05)
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
checkNAplot(train,test)
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
print(vars)
print(type)
print(perc)
naData <- data.frame(variables = vars, type = type, percentage = perc)
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") + coord_flip() + geom_hline(yintercept = 0.05)
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
checkNAplot(train,test)
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
naData <- data.frame(variables = vars, type = type, percentage = perc)
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") + coord_flip() + geom_hline(yintercept = 0.05)
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
naData <- data.frame(variables = vars, type = type, percentage = perc)
naData$variables <- factor(naData$variables,
levels = naData$variables[order(naData$perc)])
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") + coord_flip() + geom_hline(yintercept = 0.05)
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
checkNAplot(train,test)
c <- c(factor("yo"), factor("yo"), factor("mama"))
levels(c)
c
c <- c(as.factor("yo"), as.factor("yo"), as.factor("mama"))
c
factor("yo")
c(factor("yo"), factor("mama"))
c(factor(yo), factor(mama))
checkNAplot <- function(tr, te){
library(ggplot2)
vars <- ""
perc <- 0
type <- ""
for(i in 1: ncol(te)){
if(anyNA(tr[,i])){
vars <- c(vars, names(tr)[i])
type <- c(type, "train")
perc <- c(perc, length(which(is.na(tr[,i]))) / (nrow(tr) + nrow(te)))
}
if(anyNA(te[,i])){
vars <- c(vars, names(te)[i])
type <- c(type, "test")
perc <- c(perc, length(which(is.na(te[,i]))) / (nrow(tr) + nrow(te)))
}
}
if(length(vars) > 1){
vars <- vars[-1]
type <- type[-1]
perc <- perc[-1]
vars <- factor(vars)
naData <- data.frame(variables = vars, type = type, percentage = perc)
naData$variables <- factor(naData$variables,
levels = naData$variables[order(naData$perc)])
plot <- ggplot(naData,
aes(x=variables, y=percentage,
fill = type)) + geom_bar(stat = "identity") + xlab("Variable") + ylab("Percent missing") + ggtitle("NA Values Missing in Training/Test Sets") + coord_flip() + geom_hline(yintercept = 0.05)
print("Checking NA process completed.")
return(plot)
}
else
print("Checking NA process completed.")
}
?measurements
library(measurements)
?library(measurements)
?measurements-`measurements-package`
?'measurements-package
''
'
SF_Greenhouse_Gas_Inventory <- read.csv("/Users/lancefernando/Desktop/DataMining/RScript/SF_EmissionsScript/San_Francisco_Communitywide_Greenhouse_Gas_Inventory.csv")
SF_transportation <- SF_Greenhouse_Gas_Inventory[SF_Greenhouse_Gas_Inventory$Sector_General == "Transportation",]
attach(SF_transportation)
library(ggplot2)
ggplot(SF_transportation,
aes(x=factor(Calendar_Year), y=Emissions_mtCO2e,
fill = Sector_Detail)) + geom_bar(stat = "identity") + xlab("Years") + ylab("CO2 Emissions in metric tons") + ggtitle("San Francisco Transportation Emissions")
load("/Users/lancefernando/Desktop/DataMining/RProjects/BayAreaBikeShareData/BikeSharing/BikeshareWoutliers.RData")
# curr_time = as.POSIXlt(SF_trips$Start.Date[1], format = "%m/%d/%Y %H:%M");
#
# index <- 1:nrow(SF_trips)
# j <- 1
#
# day <- rep(NA, 900)
# weekday <- rep(NA, 900)
# month <- rep(NA, 900)
# year <- rep(NA, 900)
# day_total <- rep(NA, 900)
# sub_total <- rep(NA,900)
# cust_total <- rep(NA,900)
# date <- rep(NA, 900)
# duration_total <- rep(NA, 900)
# sub_dur_total <- rep(NA, 900)
# cust_dur_total <- rep(NA, 900)
#
# total = 0
# num_sub = 0
# num_cust = 0
# dur_total = 0
# sub_dur = 0
# cust_dur = 0
# for(i in index){
#
#   next_row_time <- as.POSIXlt(SF_trips$Start.Date[i], format = "%m/%d/%Y %H:%M")
#   if(next_row_time$yday != curr_time$yday | next_row_time$year != curr_time$year | i == nrow(SF_trips)){
#
#     # Storing data at index j to new vectors
#     day_total[j] <- total
#     day[j] <- curr_time$mday
#     weekday[j] <- curr_time$wday
#     month[j] <- curr_time$mon
#     year[j] <- curr_time$year + 3900
#     sub_total[j] <- num_sub
#     cust_total[j] <- num_cust
#     sub_dur_total[j] <- sub_dur
#     cust_dur_total[j] <- cust_dur
#     duration_total[j] <- dur_total
#     date[j] <- as.Date.POSIXlt(curr_time, format = "%m/%d/%Y")
#
#     j <- j + 1
#
#     # Updating variables
#     total <- 0
#     curr_time <- next_row_time
#     num_cust <- 0
#     num_sub <- 0
#     dur_total <-0
#     sub_dur <- 0
#     cust_dur <- 0
#   }
#   else{
#     total <- total + 1
#     dur_total <- dur_total + SF_trips$Duration[i]
#     if(SF_trips$Subscriber.Type[i] == "Subscriber"){
#       num_sub <- num_sub + 1
#       sub_dur <- sub_dur + SF_trips$Duration[i]
#     }
#     else{
#       num_cust <- num_cust +1
#       cust_dur <- cust_dur + SF_trips$Duration[i]
#     }
#   }
# }
#
# #date is in numeric form with origin 3970-01-01
# #converting it to readable format
# PDT <- as.Date(date, origin = "3970-01-01")
# is_weekend <- ifelse(weekday == 0 | weekday == 6, 1, 0)
# SF_totals <- data.frame(PDT, day_total, sub_total, cust_total, duration_total, sub_dur_total, cust_dur_total,is_weekend, day, weekday, month, year)
attach(SF_daily_bikeshare)
par(mfrow = c(2,2))
plot(weekday, sub_total, xlab = "Day of the week", ylab = "Number of rentals", main = "Subscribers", col = "skyblue")
plot(weekday, cust_total, xlab = "Day of the week", ylab = "Number of rentals", main = "Customers", col = "slateblue4")
plot(PDT, sub_total, col = ifelse(is_weekend == 1,"orange","steelblue"), xlab = "Year", ylab = "Number of rentals", main = "Subscribers")
legend(x = as.Date("2016-04-01"), y = 500, c("Weekday", "Weekend"), col = c("steelblue", "orange"), pch = 1, cex = 0.6)
plot(PDT, cust_total, col = ifelse(is_weekend == 1,"orange", "steelblue"), xlab = "Year", ylab = "Number of rentals", main = "Customers")
legend(x = as.Date("2016-04-01"), y = 500, c("Weekday", "Weekend"), col = c("steelblue", "orange"), pch = 1, cex = 0.6)
# Subscribers are more active on weekdays with customers on weekends
# Between late Dec through early Jan there is a decrease in Subscribers
invisible(dev.off())
par(mfrow = c(2,1))
plot(PDT, day_total, type = 'l', col = "forestgreen", xlab = "Date", ylab = "Number of rentals", main = "Rentals each month")
plot(PDT, Mean.TemperatureF, type = 'l', col = "red", xlab = "Date", ylab = "Temperature in F", main = "Temperature each month ")
lines(PDT, Max.TemperatureF, col = "orange")
lines(PDT, Min.TemperatureF, col = "lightblue")
legend(x = as.Date("2016-04-01"), y = 50, c("MaxTemp", "MeanTemp", "MinTemp"), col = c("orange", "red", "lightblue"), lty = c(1,1), cex = 0.5)
# Decrease in temperature during winter time
invisible(dev.off())
par(mfrow = c(1,2))
plot(weekday, duration_total/60, xlab = "Day of the week", ylab= "Duration in minutes", main = "Duration totals per day", col = "slateblue")
plot(PDT, duration_total/60, xlab = "Month", ylab = "Duration in minutes", main = "Duration totals throughout the year", col = "firebrick")
# Notice the outlier
invisible(dev.off())
SF_daily_bikeshare <- SF_daily_bikeshare[-which.max(duration_total),] # Removing outlier
SF_daily_bikeshare <- SF_daily_bikeshare[-which.max(duration_total),] # Removing outlier
attach(SF_daily_bikeshare)
par(mfrow = c(1,2))
plot(weekday, duration_total/60, xlab = "Day of the week", ylab= "Duration in minutes", main = "Duration totals per day", col = "slateblue")
plot(PDT, duration_total/60, xlab = "Month", ylab = "Duration in minutes", main = "Duration totals throughout the year", col = "firebrick")
invisible(dev.off())
par(mfrow = c(2,2))
plot(weekday, sub_dur_total/60, xlab = "Day of the week", ylab = "Duration in minutes", main = "Subscribers", col = "skyblue")
plot(weekday[-96], cust_dur_total[-96]/60, xlab = "Day of the week", ylab = "Duration in minutes", main = "Customers", col = "slateblue4")
plot(PDT, sub_dur_total/60, col = ifelse(is_weekend ==1,"orange", "steelblue"), xlab = "Month", ylab = "Duration in minutes", main = "Subscribers")
legend(x = as.Date("2016-04-01"), y = 20000, c("Weekday", "Weekend"), col = c("steelblue", "orange"), pch = 1, cex = 0.6)
plot(PDT[-96], cust_dur_total[-96]/60, col = ifelse(is_weekend == 1, "orange", "steelblue"), xlab = "Month", ylab = "Duration in minutes", main = "Customers")
legend(x = as.Date("2016-04-01"), y = 27500, c("Weekday", "Weekend"), col = c("steelblue", "orange"), pch = 1, cex = 0.6)
invisible(dev.off())
par(mfrow = c(2,1))
plot(PDT, day_total, type = 'l', col = "lightblue", xlab = "Date", ylab = "Number of rentals", main = "Rentals each day")
plot(PDT, Avg_Gas_Value, type = 'l', col = "orange", xlab = "Date", ylab = "Gas Prices", main = "Average Gas Prices")
invisible(dev.off())
View(SF_daily_bikeshare)
library(moments)
skewedVars <- 0
for(i in ncol(SF_daily_bikeshare))
if(is.numeric(SF_daily_bikeshare[,i])){
if(length(levels(factor(SF_daily_bikeshare[,i]))) > 2)
skewedVars <- c(skewedVars, i)
}
skewedVars <- skewedVars[-1]
library(moments)
skewedVars <- 0
for(i in ncol(SF_daily_bikeshare))
if(is.numeric(SF_daily_bikeshare[,i])){
print(i)
if(length(levels(factor(SF_daily_bikeshare[,i]))) > 2)
skewedVars <- c(skewedVars, i)
}
skewedVars <- skewedVars[-1]
sapply(SF_daily_bikeshare, class)
library(moments)
skewedVars <- 0
for(i in ncol(SF_daily_bikeshare))
print(i)
if(is.numeric(SF_daily_bikeshare[,i])){
print(i)
if(length(levels(factor(SF_daily_bikeshare[,i]))) > 2)
skewedVars <- c(skewedVars, i)
}
skewedVars <- skewedVars[-1]
library(moments)
skewedVars <- 0
for(i in 1:ncol(SF_daily_bikeshare))
if(is.numeric(SF_daily_bikeshare[,i])){
if(length(levels(factor(SF_daily_bikeshare[,i]))) > 2)
skewedVars <- c(skewedVars, i)
}
skewedVars <- skewedVars[-1]
skewedVars
par(mfrow = c(4,2))
for(i in c(2, 4, 5, 14))
plot(density(SF_daily_bikeshare[,i]), main = names(SF_daily_bikeshare)[i])
par(mfrow = c(4,2))
for(i in c(2, 4, 5, 14)){
plot(density(SF_daily_bikeshare[,i]), main = names(SF_daily_bikeshare)[i])
plot(density(SF_daily_bikeshare[,i]), main =paste("Log(", names(SF_daily_bikeshare)[i], ")", sep = "")
}
par(mfrow = c(4,2))
for(i in c(2, 4, 5, 14)){
plot(density(SF_daily_bikeshare[,i]), main = names(SF_daily_bikeshare)[i])
plot(density(SF_daily_bikeshare[,i]), main =paste("Log(", names(SF_daily_bikeshare)[i], ")", sep = ""))
}
skewness(SF_daily_bikeshare[,"Mean.TemperatureF"])
for(i in 1:ncol(SF_daily_bikeshare))
if(is.numeric(SF_daily_bikeshare[,i]))
print(paste(names(SF_daily_bikeshare)[i], skewness(SF_daily_bikeshare[,i]), sep = ": "))
par(mfrow = c(4,2))
for(i in c(2, 4, 5, "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main = names(SF_daily_bikeshare)[i])
plot(density(SF_daily_bikeshare[,i]), main =paste("Log(", names(SF_daily_bikeshare)[i], ")", sep = ""))
}
par(mfrow = c(4,2))
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(SF_daily_bikeshare[,i]), main =paste("Log(", i, ")", sep = ""))
}
par(mfrow = c(4,2))
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
dev.off
dev.off()
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
par(mfrow = c(4,2))
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
par(mfrow = c(4,2))
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
dev.off()
par(mfrow = c(4,2))
for(i in c("cust_total", "duration_total", "MeanDew.PointF", "Mean.VisibilityMiles")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
par(mfrow = c(2,2))
for(i in c("cust_total", "duration_total")){
plot(density(SF_daily_bikeshare[,i]), main =i)
plot(density(log(SF_daily_bikeshare[,i])), main =paste("Log(", i, ")", sep = ""))
}
